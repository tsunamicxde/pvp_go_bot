package telegram

import (
	"fmt"
	"log"
	"time"

	"telegram_pvp_bot/pkg/database"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/exp/rand"
)

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–æ—Ç–∞
var bot *tgbotapi.BotAPI

// ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
var lastMessageID int

// –ö–∞—Ä—Ç–∞ —Ö–æ–¥–æ–≤ –∏–≥—Ä–æ–∫–∞
var Moves = map[string]int{
	"üëä":  0,
	"‚úåÔ∏è": 1,
	"‚úã":  2,
}

// –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
// 0 - –Ω–∏—á—å—è, 1 - –ø–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞, 2 - –ø–æ–±–µ–¥–∞ –±–æ—Ç–∞
var resultMatrix = [3][3]int{
	{0, 1, 2}, // –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç 0
	{2, 0, 1}, // –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç 1
	{1, 2, 0}, // –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç 2
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
func InitBot(token string) {
	var err error

	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞: %s", bot.Self.UserName)
}

// –í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func sendMainMenu(chatID int64, welcomeText string) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	DeleteLastMessage(chatID)

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üé≤ –ò–≥—Ä–∞—Ç—å", "play"),
			tgbotapi.NewInlineKeyboardButtonData("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, welcomeText+"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
	msg.ReplyMarkup = inlineKeyboard

	bot.Send(msg)
}

// –í—ã–≤–æ–¥ –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é
func sendPlayMenu(chatID int64) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	DeleteLastMessage(chatID)

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üëä", "üëä"),
			tgbotapi.NewInlineKeyboardButtonData("‚úåÔ∏è", "‚úåÔ∏è"),
			tgbotapi.NewInlineKeyboardButtonData("‚úã", "‚úã"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ–¥:")
	msg.ReplyMarkup = inlineKeyboard

	sentMsg, err := bot.Send(msg)
	if err == nil {
		lastMessageID = sentMsg.MessageID // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	} else {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
func HandleCommand(update *tgbotapi.Update) {
	switch update.Message.Command() {
	case "start":
		HandleStartCommand(update.Message.Chat.ID)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
		bot.Send(msg)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
func HandleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
	switch callbackQuery.Data {
	case "play":
		HandlePlayButton(callbackQuery.Message.Chat.ID)
	case "stats":
		HandleStatsButton(callbackQuery.Message.Chat.ID)
	case "üëä", "‚úåÔ∏è", "‚úã":
		HandleMoveButton(callbackQuery)
	default:
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
		bot.Send(msg)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
func HandleStartCommand(chatID int64) {
	sendMainMenu(chatID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞.\n")
	err := database.InsertUserData(chatID) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å"
func HandlePlayButton(chatID int64) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	DeleteLastMessage(chatID)

	sendPlayMenu(chatID)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
func HandleMoveButton(callbackQuery *tgbotapi.CallbackQuery) {
	chatID := callbackQuery.Message.Chat.ID

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	DeleteLastMessage(chatID)

	move := callbackQuery.Data

	botMoveInt := generateRandomMove()
	botMove, isMapContainsKey := findKeyByValue(Moves, botMoveInt)

	if !isMapContainsKey {
		return
	}

	moveInt := Moves[move]

	result := resultMatrix[moveInt][botMoveInt]

	text := handleGameResult(chatID, botMove, result)

	msg := tgbotapi.NewMessage(chatID, text)
	sentMsg, err := bot.Send(msg)
	sendMainMenu(chatID, "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?\n")
	if err == nil {
		lastMessageID = sentMsg.MessageID // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	} else {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
func handleGameResult(chatID int64, botMove string, gameCode int) string {
	user, err := database.GetUserStats(chatID) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database
	if err != nil {
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err)
		return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
	}

	text := ""
	suffix := fmt.Sprintf("\n–•–æ–¥ –±–æ—Ç–∞: %s", botMove)

	switch gameCode {
	case 0: // –ù–∏—á—å—è
		text = "–ù–∏—á—å—è!" + suffix
		user.NumberOfDraws++
	case 1: // –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞
		text = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!" + suffix
		user.NumberOfWins++
	case 2: // –ü–æ–±–µ–¥–∞ –±–æ—Ç–∞
		text = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!" + suffix
		user.NumberOfDefeats++
	default:
		text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
	}

	err = database.UpdateUserStats(chatID, user)
	if err != nil {
		log.Printf("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: %v", err)
		return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
	}
	return text
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ö–æ–¥–∞ –±–æ—Ç–∞
func generateRandomMove() int {
	rand.Seed(uint64(time.Now().UnixNano()))
	randomNum := rand.Intn(3)
	return randomNum
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –≤ —Å–ª–æ–≤–∞—Ä–µ
func findKeyByValue(myMap map[string]int, value int) (string, bool) {
	for key, val := range myMap {
		if val == value {
			return key, true
		}
	}
	return "", false
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
func HandleStatsButton(chatID int64) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	DeleteLastMessage(chatID)

	user, err := database.GetUserStats(chatID) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database
	if err != nil {
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
		bot.Send(msg)
		return
	}
	winningRatio := 0.0

	if user.NumberOfWins+user.NumberOfDefeats+user.NumberOfDraws > 0 {
		winningRatio = float64(user.NumberOfWins) / float64(user.NumberOfWins+user.NumberOfDefeats+user.NumberOfDraws)
	}

	text := fmt.Sprintf("üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: %d\n‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π: %d\nü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏—á—å–∏—Ö: %d\n#Ô∏è‚É£ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–±–µ–¥: %.2f",
		user.NumberOfWins,
		user.NumberOfDefeats,
		user.NumberOfDraws,
		winningRatio)

	msg := tgbotapi.NewMessage(chatID, text)

	sentMsg, err := bot.Send(msg)
	if err == nil {
		lastMessageID = sentMsg.MessageID // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	} else {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func GetUpdates() tgbotapi.UpdatesChannel {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	return bot.GetUpdatesChan(u)
}

func SendMessage(msg tgbotapi.MessageConfig) {
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func DeleteLastMessage(chatID int64) {
	if lastMessageID != 0 {
		// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
		deleteConfig := tgbotapi.NewDeleteMessage(chatID, lastMessageID)
		_, err := bot.Send(deleteConfig)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		lastMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
	}
}
